{
  const trueBooleanSet = {
    'true': true,
    'yes': true,
    'high': true,
    'on': true,
    'valid': true,
    'ok': true
  }
  const MakeNumber = value => ({ type: 'number', value: Number(value)  })
  const MakeBinary = (left, operator, right) => ({ type: 'binary', left, operator, right })
  const MakeCall = (target, params) => ({ type: 'call', target, params: params ?? [] })
  const Name = value => ({ type: 'name', value })
  const Tuple = elements => ({ type: 'tuple', elements })
}

program = statements:(_? @(statement /*/ pragma*/) _?)* _? {
  return {
    type: 'program',
    statements,
    trueBooleanSet
  }
}

// --------- STATEMENTS --------- //
statement
  = section
  / monoid
  / ifCase
  / character
  / returnStatement
  / assignment
  / call
  / choice
  / dialogue
  / narration

character = 'character' _? name:string _? 'as' _? target:IDENTIFIER {
  return {
    type: 'character',
    target,
    name
  }
}

ifCase = 'if' _? expr:expression _? block:block or:(_? 'else' @((_ @ifCase) / (_? @block)))? {
  return {
    type: 'if',
    expr,
    block,
    else: or
  }
}

section = 'section' _? target:IDENTIFIER _? block:block {
  return {
    type: 'section',
    target,
    block
  }
}

call = 'call' _? target:expression params:(_? 'with' _? @exprList)? {
  return MakeCall(target, params)
}

assignment
  = 'set' _ target:expression _ 'to' _? value:expression {
    return {
      type: 'assignment',
      target,
      value
    }
  } / 'add' _? value:expression _? 'to' _ target:expression {
    return {
      type: 'assignment',
      target,
      value: MakeBinary(target, '+', value)
  	}
  } / 'increment' _? target:expression surplus:(_ 'by' @expression)? {
    return {
      type: 'assignment',
      target,
      value: MakeBinary(target, surplus ?? MakeNumber(1))
    }
  }

choice = 'choice' title:(_ @(string / name))? _? '{' options:(_? @choiceCase _?)* _? '}' {
  return {
    type: 'choice',
    options,
    title
  }
}

narration = text:string {
  return {
    type: 'narration',
    text
  }
}

dialogue = actor:(name / string) ' '* text:string {
  return {
    type: 'dialogue',
    actor,
    text
  }
}

returnStatement = 'return' _? value:expression {
  return {
    type: 'return',
    value
  }
}

monoid = type:('clear' / 'end' / 'wait' / 'repeat') {
  return {
    type
  }
}

// -- NON-SHARED ATOMS -- //

choiceCase = match:(string / name) _? then:block {
  return {
    type: 'case',
    match,
    then
  }
}

// --------- EXPRESSIONS --------- //

expression = logicExpr

logicExpr = left:compareExpr _ operator:BOOLEAN_OP _ right:logicExpr {
  return MakeBinary(left, operator, right)
} / compareExpr

compareExpr = left:addExpr _? operator:COMPARE_OP _? right:compareExpr {
  return MakeBinary(left, operator, right)
} / addExpr

addExpr = left:mulExpr _? operator:ADDITIVE_OP _? right:addExpr {
  return MakeBinary(left, operator, right)
} / mulExpr

mulExpr = left:expExpr _? operator:MULTIPLICATIVE_OP _? right:mulExpr {
  return MakeBinary(left, operator, right)
} / expExpr

expExpr = left:dotExpr _? operator:EXP_OP _? right:expExpr {
  return MakeBinary(left, operator, right)
} / dotExpr

_dotTailAtom
  = &'(' @name
  / name:name { return { type: 'string', text: [name.value] } }
  / unaryExpr

dotExpr = head:unaryExpr _? tail:("'s" _? @_dotTailAtom)+ {
  return {
    type: 'dot',
    head,
    tail
  }
} / unaryExpr

unaryExpr
  = operator:(@(@UNARY_OPERATOR _?) / @(@'not' _)) term:atom {
    return {
      type: 'unary',
      mode: 'prefix',
      operator,
      term
    }
  }
  / term:atom _? operator:('exists') {
    return {
      type: 'unary',
      mode: 'postfix',
      operator,
      term
    }
  }
  / atom

atom
  = call
  / random
  / choice
  / tuple
  / string
  / number
  / nothing
  / boolean
  / exprWrap
  / name

// --------- PARTIALS --------- //
exprWrap = '(' _? @expression _? ')'

exprList = e:expression t:(SEP @expression)* { return [e, ...t] }

// --------- ATOMS --------- //

tuple "tuple" = '[' _? elements:exprList _? ']' {
  return Tuple(elements) 
}

random "random expression"
  = 'roll' sides:(@(_ @number))? {
    return MakeCall({ type: 'name', value: '__rand_int' }, [Tuple(sides)])
  }
  / 'one' _ 'of' _ choices:exprList {
    return MakeCall({ type: 'name', value: '__rand_array' }, [Tuple(choices)])
  }

block "block" = '{' p:program '}' {
  return {
    type: 'block',
    statements: p.statements
  }
}

name "reference" = value:IDENTIFIER {
  return {
    type: 'name',
    value
  }
}

string = '"' text:(stringRef / stringEmbedExpr / stringText)* '"' {
  return {
    type: 'string',
    text
  }
} / ":" text:$(!(_/']'/'}') .)+ {
  return {
    type: 'string',
    text: [text]
  }
}

stringRef = '$' @name

stringEmbedExpr = '$(' _? @expression _? ')'

stringText = e:$(!'"' ([^$] / '\\$'))+ {
  return e
}

number
  = '1st' { return MakeNumber('0') }
  / '2nd' { return MakeNumber('1') }
  / '3rd' { return MakeNumber('2') }
  / '0th' { throw new SyntaxError('Can\'t have a ordinal 0th number') }
  / n:$([0-9]+) 'th' { return MakeNumber(Number(n)-1) }
  / n:$([0-9]+('.'[0-9]+)?) { return MakeNumber(n) }
  / expr:exprWrap 'th' { return MakeBinary(expr, '-', MakeNumber('1')) }

boolean = b:BOOLEAN {
  const value = b in trueBooleanSet
  return {
    type: 'boolean',
    value
  }
}

// - Existential types - //
nothing = ('nothing' / '[]' / 'void' / 'nil' / 'null' / 'emtpy') { return { type: 'unit' } }
invalid = 'invalid' { return { type: 'invalid' } }

// -- OPERATORS -- //
COMPARE_OP "comparison operator" = '>=' / '>' / '<=' / '<>' / '<' / '=' / 'is' / 'isnt' / 'isn\'t' / 'is not'
BOOLEAN_OP "boolean operator" = 'and' / 'or'
ADDITIVE_OP "addition or subtraction operator" = [+-]
MULTIPLICATIVE_OP "product or division operator" = [*/]
EXP_OP "exponential operator" = '^' / '**'
UNARY_OPERATOR "unary prefix operator" = [!~@Â¿+-]

// -- ELEMENTAL TOKENS -- //
BOOLEAN "boolean" = 'true' / 'false' / 'high' / 'low' / 'yes' / 'no' / 'on' / 'off'
IDENTIFIER "identifier" = $([A-Za-z_][A-Za-z0-9_]*)
NL "new line" = '\r\n' / '\n' / '\r'
COMMENT "comment" = '#' (!NL .)* NL
BLANK "white space" = [ \t\n\r]
_ = (BLANK / COMMENT)+
SEP "separator" = (_? ',' _?) / [ \t]
